/*
 * BlackBerryHost.cpp
 *
 *  Created on: Jun 2, 2013
 *      Author: Francisco Tufr—
 */

#include "BlackBerryHost.h"

//#include <stdarg.h>
#include <stdlib.h>
//#include <stdio.h>
#include <unistd.h>

#include <lua-headers/moai_lua.h>

BlackBerryHost::BlackBerryHost () {

}

BlackBerryHost::~BlackBerryHost () {

	AKUFinalize ();

	screen_stop_events(screen_cxt);

	bbutil_terminate();

	screen_destroy_context(screen_cxt);

	bps_shutdown();

}


void BlackBerryHost::start () {

	running = true;

	initializeBlackBerry ();
	initializeMoai ();

	while ( running ) {
		update ();
		render ();
	}

}

void BlackBerryHost::initializeBlackBerry () {

	bps_initialize ();

	// Create a screen context that will be used to create an
	// EGL surface to to receive libscreen events
	screen_create_context ( &screen_cxt, 0 );

	//Use utility code to initialize EGL for rendering with GL ES 2.0
	if ( EXIT_SUCCESS != bbutil_init_egl ( screen_cxt ) ) {
		fprintf ( stderr, "bbutil_init_egl failed\n" );
		terminate ();
	}

	//Query width and height of the window surface created
	eglQuerySurface ( egl_disp, egl_surf, EGL_WIDTH, &surface_width );
	eglQuerySurface ( egl_disp, egl_surf, EGL_HEIGHT, &surface_height );

	//Signal BPS library that navigator and screen events will be requested
	if ( BPS_SUCCESS != screen_request_events ( screen_cxt ) ) {
		fprintf ( stderr, "screen_request_events failed\n" );
	    terminate ();
	}

	if ( BPS_SUCCESS != navigator_request_events ( 0 ) ) {
		fprintf ( stderr, "navigator_request_events failed\n" );
	    terminate ();
	}

	//Signal BPS library that navigator orientation is locked
	if ( BPS_SUCCESS != navigator_rotation_lock ( true ) ) {
		fprintf ( stderr, "navigator_rotation_lock failed\n" );
	    terminate ();
	}

}

void BlackBerryHost::initializeMoai () {

    //Initialize AKU
    aku_context_id = AKUCreateContext ();

	AKUSetInputConfigurationName ( "BlackBerry 10" );

//	// Initialize input devices
//	AKUReserveInputDevices			( BB10InputDeviceID::TOTAL );
//	AKUSetInputDevice				( BB10InputDeviceID::DEVICE, "device" );
//
//	AKUReserveInputDeviceSensors	( BB10InputDeviceID::DEVICE, BB10InputDeviceSensorID::TOTAL );
//	AKUSetInputDeviceTouch			( BB10InputDeviceID::DEVICE, BB10InputDeviceSensorID::TOUCH, "touch" );

	// Configure Screen
//	AKUDetectGfxContext ();
//	AKUSetScreenSize ( surface_width, surface_height );
//	AKUSetViewSize ( surface_width, surface_height );
//
//	AKURunData ( moai_lua, moai_lua_SIZE, AKU_DATA_STRING, AKU_DATA_ZIPPED );
//
//    // Setup working directory
//    #define MAX_LENGTH 256
//    char fullpath[MAX_LENGTH];
//    char appPath[MAX_LENGTH];
//    getcwd(appPath, MAX_LENGTH);
//    snprintf(fullpath, MAX_LENGTH, "%s/app/native/assets/", appPath);
//    AKUSetWorkingDirectory(fullpath);
//
//    // Run main script!
//	AKURunScript ( "main.lua" );

//	AKUPause(false);

}

void BlackBerryHost::terminate () {
	running = false;
}


void BlackBerryHost::render () {
	AKURender ();
	bbutil_swap ();
}

void BlackBerryHost::update () {
	processEvents ();
	AKUUpdate ();
}

void BlackBerryHost::processEvents () {
	//Request and process all available BPS events
	bps_event_t *event = NULL;

	for(;;) {
		if ( BPS_SUCCESS != bps_get_event ( &event, 0 ) ) {
			fprintf(stderr, "bps_get_event failed\n");
	        break;
		}

		if (event) {
			int domain = bps_event_get_domain(event);

	        if (domain == screen_get_domain()) {
	        	handleScreenEvent(event);
	        } else if ((domain == navigator_get_domain()) && (NAVIGATOR_EXIT == bps_event_get_code(event))) {
	        	running = 0;
	        }
		} else {
			break;
		}
	}
}

void BlackBerryHost::handleScreenEvent(bps_event_t *event) {
    screen_event_t screen_event = screen_event_get_event(event);

    int screen_val;
    screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_TYPE, &screen_val);

    switch (screen_val) {
    case SCREEN_EVENT_MTOUCH_TOUCH:
    	enqueueTouch ( screen_event, true);
    	break;
    case SCREEN_EVENT_MTOUCH_MOVE:
    	enqueueTouch ( screen_event, true);
    	break;
    case SCREEN_EVENT_MTOUCH_RELEASE:
    	enqueueTouch ( screen_event, false);
        break;
    }
}

void BlackBerryHost::enqueueTouch ( screen_event_t event, bool down) {
	int position[2], touch;

	screen_get_event_property_iv(event, SCREEN_PROPERTY_SOURCE_POSITION, position);
	screen_get_event_property_iv(event, SCREEN_PROPERTY_TOUCH_ID, &touch);

	AKUEnqueueTouchEvent (
		BB10InputDeviceID::DEVICE,
		BB10InputDeviceSensorID::TOUCH,
		touch, // use the address of the touch as a unique id
		down,
		position[0],
		position[1]
	);

}

